import { BJShell } from "@/shell";
import chalk from "chalk";
import conf from "@/config";
import { exec } from "child_process";
import { getProblem, setLanguageCommentMark } from "@/net/parse";
import { readTemplateFromLocal } from "@/storage/filereader";
import { writeFile, writeMDFile } from "@/storage/filewriter";
import { generateFilePath, getFilePath } from "../utils";
import { get } from "@/net/fetch";

export default function set(that: BJShell, arg: string[]) {
  return async (num?: number) => {
    let val = num;
    if (val === undefined) {
      if (arg.length === 0 && that.user.getQnum() !== 0)
        val = that.user.getQnum();
      else {
        const tmp_val = parseInt(arg[0]);
        if (!isNaN(tmp_val) && tmp_val >= 0) val = tmp_val;
      }
      if (!val) {
        console.log("set <question number>");
        return;
      }
    }
    const lang = that.findLang();
    if (!lang) {
      console.log("lang 명령어를 통해 먼저 언어를 선택해 주세요.");
      return;
    }
    const question = await getProblem(val, that.user.getCookies());
    if (question === null) {
      console.log("유효하지 않은 문제 번호입니다!");
      return;
    }
    // ASSERT val is valid qnum
    await that.user.setQnum(val);
    console.log(
      `문제가 ${chalk.yellow(val + ". " + question.title)}로 설정되었습니다.`
    );

    let cmark = lang.commentmark ?? "";
    if (!cmark) {
      const result = await new Promise((resolveFunc) => {
        that.r.question(
          "현재 언어의 주석 문자를 모르겠습니다. 주석 문자를 입력해 주세요. 만약 입력을 안할경우, 문제 정보 헤더가 생성되지 않습니다. \n",
          (answer) => {
            resolveFunc(answer);
          }
        );
      });
      cmark = result as string;
      setLanguageCommentMark(lang.num, cmark);
    }
    const username = await that.user.getUsername();
    const utc =
      new Date().getTime() + new Date().getTimezoneOffset() * 60 * 1000;
    const KR_TIME_DIFF = 9 * 60 * 60 * 1000;
    const kr_curr = new Date(utc + KR_TIME_DIFF);
    const commentHeader = cmark
      ? `${cmark}
${cmark}        ${question.qnum}. ${question.title} <${conf.URL}${conf.PROB}${
          question.qnum
        }>
${cmark}        
${cmark}        By: ${username} <${conf.URL}${conf.USER}${username}>
${cmark}        Language: ${lang.name ?? ""}
${cmark}        Created at: ${kr_curr.toLocaleString()}
${cmark}        
${cmark}        Auto-generated by BJShell
${cmark}
`
      : "";
    await writeMDFile(question);
    const extension = lang.extension ?? "";
    let filepath = await getFilePath(that, true);
    if(!filepath) 
      filepath = await generateFilePath(that);
    const langTemplate = (await readTemplateFromLocal(extension)) ?? "";

    if (await writeFile(filepath, commentHeader + langTemplate))
      console.log(
        `${chalk.green(filepath)}에 새로운 답안 파일을 생성했습니다.`
      );
    else console.log("파일이 존재합니다! 이전 파일을 불러옵니다.");
    exec(`code ${filepath.replace(/ /g, "\\ ")}`);
  };
}
